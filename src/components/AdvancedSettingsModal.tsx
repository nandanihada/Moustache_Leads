import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  Settings, 
  Link, 
  BarChart3, 
  Shield, 
  Clock, 
  Globe,
  Copy,
  Eye,
  Zap,
  RefreshCw
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface AdvancedSettingsModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  offer?: any;
  onSettingsUpdated?: () => void;
}

interface AutoGeneratedFields {
  offerId: string;
  maskedUrls: string[];
  trackingLinks: {
    click: string;
    impression: string;
    conversion: string;
  };
  postbackUrl: string;
  previewUrl: string;
}

export const AdvancedSettingsModal: React.FC<AdvancedSettingsModalProps> = ({
  open,
  onOpenChange,
  offer,
  onSettingsUpdated
}) => {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState<AutoGeneratedFields | null>(null);
  const [settings, setSettings] = useState({
    // Tracking Settings
    enableClickTracking: true,
    enableImpressionTracking: true,
    enableConversionTracking: true,
    fraudDetectionLevel: 'medium',
    
    // Link Masking Settings
    enableLinkMasking: false,
    customDomain: '',
    shortCodeLength: 8,
    useCustomCode: false,
    customCode: '',
    
    // Advanced Features
    enableGeoTargeting: false,
    enableDeviceTargeting: false,
    enableTimeBasedTargeting: false,
    enableCapLimits: false,
    dailyCapLimit: 1000,
    
    // Postback Settings
    enablePostbacks: true,
    postbackUrl: '',
    postbackParameters: 'subid={subid}&payout={payout}&status={status}',
    
    // Security Settings
    enableIPWhitelist: false,
    ipWhitelist: '',
    enableReferrerCheck: false,
    allowedReferrers: '',
    
    // Performance Settings
    cacheEnabled: true,
    cacheTTL: 300,
    enableCompression: true,
    
    // Notification Settings
    emailNotifications: true,
    slackWebhook: '',
    discordWebhook: ''
  });

  useEffect(() => {
    if (open && offer) {
      generateAutoFields();
      loadExistingSettings();
    }
  }, [open, offer]);

  const generateAutoFields = async () => {
    if (!offer) return;

    try {
      setLoading(true);
      
      // Generate auto-generated fields
      const autoFields: AutoGeneratedFields = {
        offerId: offer.offer_id || `ML-${String(Date.now()).slice(-5).padStart(5, '0')}`,
        maskedUrls: [
          `https://short.ly/${generateShortCode(6)}`,
          `https://go.link/${generateShortCode(8)}`,
          `https://click.me/${generateShortCode(7)}`
        ],
        trackingLinks: {
          click: `https://track.ascend.com/click?offer=${offer.offer_id}&subid={subid}`,
          impression: `https://track.ascend.com/impression?offer=${offer.offer_id}&subid={subid}`,
          conversion: `https://track.ascend.com/conversion?offer=${offer.offer_id}&subid={subid}`
        },
        postbackUrl: `https://api.ascend.com/postback?offer=${offer.offer_id}&subid={subid}&payout={payout}&status={status}`,
        previewUrl: `https://preview.ascend.com/offer/${offer.offer_id}`
      };

      setAutoGenerated(autoFields);
      
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate auto fields",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const generateShortCode = (length: number) => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  };

  const loadExistingSettings = async () => {
    if (!offer) return;

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/admin/offers/${offer.offer_id}/settings`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        if (data.settings) {
          setSettings(prev => ({ ...prev, ...data.settings }));
        }
      }
    } catch (error) {
      console.warn('Could not load existing settings:', error);
    }
  };

  const handleSaveSettings = async () => {
    if (!offer) return;

    try {
      setLoading(true);
      
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/admin/offers/${offer.offer_id}/settings`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ settings }),
      });

      if (response.ok) {
        toast({
          title: "Success",
          description: "Advanced settings saved successfully",
        });
        onSettingsUpdated?.();
        onOpenChange(false);
      } else {
        throw new Error('Failed to save settings');
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save advanced settings",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied",
      description: `${label} copied to clipboard`,
    });
  };

  const regenerateFields = () => {
    generateAutoFields();
    toast({
      title: "Regenerated",
      description: "Auto-generated fields have been refreshed",
    });
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Advanced Settings
          </DialogTitle>
          <DialogDescription>
            Configure advanced tracking, masking, and automation settings for {offer?.name}
          </DialogDescription>
        </DialogHeader>

        <Tabs defaultValue="auto-generated" className="w-full">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="auto-generated">Auto-Generated</TabsTrigger>
            <TabsTrigger value="tracking">Tracking</TabsTrigger>
            <TabsTrigger value="masking">Link Masking</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
            <TabsTrigger value="performance">Performance</TabsTrigger>
          </TabsList>

          {/* Auto-Generated Fields Tab */}
          <TabsContent value="auto-generated" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      <Zap className="h-4 w-4" />
                      Auto-Generated Fields
                    </CardTitle>
                    <CardDescription>
                      The following fields are automatically generated when the offer is created
                    </CardDescription>
                  </div>
                  <Button variant="outline" size="sm" onClick={regenerateFields} disabled={loading}>
                    <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                    Regenerate
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                {autoGenerated && (
                  <>
                    {/* Offer ID */}
                    <div className="space-y-2">
                      <Label className="flex items-center gap-2">
                        <Badge variant="secondary">Auto</Badge>
                        Offer ID
                      </Label>
                      <div className="flex items-center gap-2">
                        <Input value={autoGenerated.offerId} readOnly className="font-mono" />
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => copyToClipboard(autoGenerated.offerId, 'Offer ID')}
                        >
                          <Copy className="h-4 w-4" />
                        </Button>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Format: ML-XXXXX (auto-increment format)
                      </p>
                    </div>

                    <Separator />

                    {/* Masked URLs */}
                    <div className="space-y-2">
                      <Label className="flex items-center gap-2">
                        <Badge variant="secondary">Auto</Badge>
                        Masked URLs
                      </Label>
                      <div className="space-y-2">
                        {autoGenerated.maskedUrls.map((url, index) => (
                          <div key={index} className="flex items-center gap-2">
                            <Input value={url} readOnly className="font-mono" />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(url, 'Masked URL')}
                            >
                              <Copy className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => window.open(url, '_blank')}
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                          </div>
                        ))}
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Generated based on masking settings and available domains
                      </p>
                    </div>

                    <Separator />

                    {/* Tracking Links */}
                    <div className="space-y-2">
                      <Label className="flex items-center gap-2">
                        <Badge variant="secondary">Auto</Badge>
                        Tracking Links
                      </Label>
                      <div className="space-y-2">
                        <div>
                          <Label className="text-sm text-muted-foreground">Click Tracking</Label>
                          <div className="flex items-center gap-2">
                            <Input value={autoGenerated.trackingLinks.click} readOnly className="font-mono text-xs" />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(autoGenerated.trackingLinks.click, 'Click tracking link')}
                            >
                              <Copy className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                        <div>
                          <Label className="text-sm text-muted-foreground">Impression Tracking</Label>
                          <div className="flex items-center gap-2">
                            <Input value={autoGenerated.trackingLinks.impression} readOnly className="font-mono text-xs" />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(autoGenerated.trackingLinks.impression, 'Impression tracking link')}
                            >
                              <Copy className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                        <div>
                          <Label className="text-sm text-muted-foreground">Conversion Tracking</Label>
                          <div className="flex items-center gap-2">
                            <Input value={autoGenerated.trackingLinks.conversion} readOnly className="font-mono text-xs" />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(autoGenerated.trackingLinks.conversion, 'Conversion tracking link')}
                            >
                              <Copy className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Created for analytics and postback integration
                      </p>
                    </div>

                    <Separator />

                    {/* Postback URL */}
                    <div className="space-y-2">
                      <Label className="flex items-center gap-2">
                        <Badge variant="secondary">Auto</Badge>
                        Postback URL
                      </Label>
                      <div className="flex items-center gap-2">
                        <Input value={autoGenerated.postbackUrl} readOnly className="font-mono text-xs" />
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => copyToClipboard(autoGenerated.postbackUrl, 'Postback URL')}
                        >
                          <Copy className="h-4 w-4" />
                        </Button>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Automatically configured for conversion tracking
                      </p>
                    </div>

                    <Separator />

                    {/* Preview URL */}
                    <div className="space-y-2">
                      <Label className="flex items-center gap-2">
                        <Badge variant="secondary">Auto</Badge>
                        Preview URL
                      </Label>
                      <div className="flex items-center gap-2">
                        <Input value={autoGenerated.previewUrl} readOnly className="font-mono" />
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => copyToClipboard(autoGenerated.previewUrl, 'Preview URL')}
                        >
                          <Copy className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => window.open(autoGenerated.previewUrl, '_blank')}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        Safe preview link for testing without affecting analytics
                      </p>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Tracking Settings Tab */}
          <TabsContent value="tracking" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-4 w-4" />
                  Tracking Configuration
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Click Tracking</Label>
                    <p className="text-sm text-muted-foreground">Track all clicks on this offer</p>
                  </div>
                  <Switch
                    checked={settings.enableClickTracking}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableClickTracking: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Impression Tracking</Label>
                    <p className="text-sm text-muted-foreground">Track offer impressions</p>
                  </div>
                  <Switch
                    checked={settings.enableImpressionTracking}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableImpressionTracking: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Conversion Tracking</Label>
                    <p className="text-sm text-muted-foreground">Track conversions and postbacks</p>
                  </div>
                  <Switch
                    checked={settings.enableConversionTracking}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableConversionTracking: checked }))}
                  />
                </div>

                <div className="space-y-2">
                  <Label>Fraud Detection Level</Label>
                  <Select
                    value={settings.fraudDetectionLevel}
                    onValueChange={(value) => setSettings(prev => ({ ...prev, fraudDetectionLevel: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low - Basic checks</SelectItem>
                      <SelectItem value="medium">Medium - Standard protection</SelectItem>
                      <SelectItem value="high">High - Strict filtering</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Link Masking Tab */}
          <TabsContent value="masking" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Link className="h-4 w-4" />
                  Link Masking Settings
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Link Masking</Label>
                    <p className="text-sm text-muted-foreground">Create shortened masked URLs</p>
                  </div>
                  <Switch
                    checked={settings.enableLinkMasking}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableLinkMasking: checked }))}
                  />
                </div>

                {settings.enableLinkMasking && (
                  <>
                    <div className="space-y-2">
                      <Label>Custom Domain</Label>
                      <Input
                        placeholder="e.g., short.ly"
                        value={settings.customDomain}
                        onChange={(e) => setSettings(prev => ({ ...prev, customDomain: e.target.value }))}
                      />
                    </div>

                    <div className="space-y-2">
                      <Label>Short Code Length</Label>
                      <Select
                        value={settings.shortCodeLength.toString()}
                        onValueChange={(value) => setSettings(prev => ({ ...prev, shortCodeLength: parseInt(value) }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="6">6 characters</SelectItem>
                          <SelectItem value="8">8 characters</SelectItem>
                          <SelectItem value="10">10 characters</SelectItem>
                          <SelectItem value="12">12 characters</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="flex items-center justify-between">
                      <div>
                        <Label>Use Custom Code</Label>
                        <p className="text-sm text-muted-foreground">Specify custom short code</p>
                      </div>
                      <Switch
                        checked={settings.useCustomCode}
                        onCheckedChange={(checked) => setSettings(prev => ({ ...prev, useCustomCode: checked }))}
                      />
                    </div>

                    {settings.useCustomCode && (
                      <div className="space-y-2">
                        <Label>Custom Code</Label>
                        <Input
                          placeholder="e.g., MYOFFER123"
                          value={settings.customCode}
                          onChange={(e) => setSettings(prev => ({ ...prev, customCode: e.target.value }))}
                        />
                      </div>
                    )}
                  </>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security Tab */}
          <TabsContent value="security" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-4 w-4" />
                  Security Settings
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable IP Whitelist</Label>
                    <p className="text-sm text-muted-foreground">Restrict access to specific IPs</p>
                  </div>
                  <Switch
                    checked={settings.enableIPWhitelist}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableIPWhitelist: checked }))}
                  />
                </div>

                {settings.enableIPWhitelist && (
                  <div className="space-y-2">
                    <Label>IP Whitelist</Label>
                    <Textarea
                      placeholder="Enter IP addresses, one per line"
                      value={settings.ipWhitelist}
                      onChange={(e) => setSettings(prev => ({ ...prev, ipWhitelist: e.target.value }))}
                    />
                  </div>
                )}

                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Referrer Check</Label>
                    <p className="text-sm text-muted-foreground">Validate referrer domains</p>
                  </div>
                  <Switch
                    checked={settings.enableReferrerCheck}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableReferrerCheck: checked }))}
                  />
                </div>

                {settings.enableReferrerCheck && (
                  <div className="space-y-2">
                    <Label>Allowed Referrers</Label>
                    <Textarea
                      placeholder="Enter domains, one per line"
                      value={settings.allowedReferrers}
                      onChange={(e) => setSettings(prev => ({ ...prev, allowedReferrers: e.target.value }))}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Performance Tab */}
          <TabsContent value="performance" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  Performance Settings
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Caching</Label>
                    <p className="text-sm text-muted-foreground">Cache offer data for better performance</p>
                  </div>
                  <Switch
                    checked={settings.cacheEnabled}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, cacheEnabled: checked }))}
                  />
                </div>

                {settings.cacheEnabled && (
                  <div className="space-y-2">
                    <Label>Cache TTL (seconds)</Label>
                    <Input
                      type="number"
                      value={settings.cacheTTL}
                      onChange={(e) => setSettings(prev => ({ ...prev, cacheTTL: parseInt(e.target.value) }))}
                    />
                  </div>
                )}

                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Compression</Label>
                    <p className="text-sm text-muted-foreground">Compress responses for faster loading</p>
                  </div>
                  <Switch
                    checked={settings.enableCompression}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableCompression: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label>Enable Cap Limits</Label>
                    <p className="text-sm text-muted-foreground">Set daily conversion limits</p>
                  </div>
                  <Switch
                    checked={settings.enableCapLimits}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableCapLimits: checked }))}
                  />
                </div>

                {settings.enableCapLimits && (
                  <div className="space-y-2">
                    <Label>Daily Cap Limit</Label>
                    <Input
                      type="number"
                      value={settings.dailyCapLimit}
                      onChange={(e) => setSettings(prev => ({ ...prev, dailyCapLimit: parseInt(e.target.value) }))}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <div className="flex justify-end gap-2 pt-4">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleSaveSettings} disabled={loading}>
            {loading ? 'Saving...' : 'Save Settings'}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};
